from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.chat_action import ChatActionSender

from app.core.bot import bot
from app.core.config import settings
from app.forms.subscription import SupportForm
from app.keyboards.inline import (
    device_inline_kb,
    keys_inline_kb,
    protocol_inline_kb,
    subscription_inline_kb)
from app.messages.common import CommonMessage

router = Router()


@router.callback_query(F.data == 'get_subscription')
async def get_subscription_user(call: CallbackQuery, current_user: dict):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await call.answer(CommonMessage.LOAD_MSG_SUB, show_alert=False)
    subscriptions = current_user.get('subscription', None)
    if subscriptions:
        lines = []
        for idx, sub in enumerate(subscriptions, start=1):
            region = sub.get('region').get('name', '‚ùì–†–µ–≥–∏–æ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            end_date = sub.get('end_date', '')[:10]
            sub_type = sub.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            lines.append(
                f'üîπ <b>–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ{idx}</b>\n'
                f'–¢–∏–ø: {sub_type}\n'
                f'–†–µ–≥–∏–æ–Ω: {region}\n'
                f'–î–æ: <b>{end_date}</b>\n'
            )

        subs_info = '\n'.join(lines)
        await call.message.delete()
        await call.message.answer(
            CommonMessage.SUBSCRIPTIONS_INFO.format(subscriptions=subs_info),
            reply_markup=subscription_inline_kb())
    else:
        await call.message.delete()
        await call.message.answer(
            CommonMessage.SUBSCRIPTION_WELCOME,
            reply_markup=subscription_inline_kb(trial=True))


@router.callback_query(F.data == 'get_ref_url')
async def get_ref_url(call: CallbackQuery, current_user: dict):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    await call.answer(CommonMessage.LOAD_MSG_REF, show_alert=False)
    # TODO: –í—ã–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –µ–≥–æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
    # TODO: –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–µ–∫–µ–Ω–¥—É –ø–æ –≤—Å–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º
    async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
        await call.message.delete()
        await call.message.answer(
            CommonMessage.REFERRAL_MESSAGE.format(user_id=call.from_user.id),
            reply_markup=keys_inline_kb())


@router.callback_query(F.data == 'get_price')
async def get_price(call: CallbackQuery):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
    await call.answer(CommonMessage.LOAD_MSG_PRICE, show_alert=False)
    async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
        url = (settings.get_backend_url +
                settings.SUBSCRIPTION_PATH +
                settings.PRICE_PATH)
        async with call.bot.http_client.get(url) as response:
            if response.status != 200:
                await call.message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã –Ω–∞ –í–ü–ù')
                return
            answer = await response.json()
        await call.message.delete()
        await call.message.answer(CommonMessage.format_price_message(answer),
                                  reply_markup=keys_inline_kb())


@router.callback_query(F.data == 'get_help')
async def get_help(call: CallbackQuery, state: FSMContext):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
    await call.answer(CommonMessage.LOAD_MSG_FAQ, show_alert=False)
    async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
        await call.message.delete()
        await call.message.answer(CommonMessage.CHOICE_MSG_PROTOCOL,
                                  reply_markup=protocol_inline_kb())
    await state.set_state(SupportForm.protocol)


@router.callback_query(SupportForm.protocol)
async def choice_device(call: CallbackQuery, state: FSMContext):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    await state.update_data(protocol=call.data)
    data = await state.get_data()
    protocol = data.get('protocol')
    await call.answer(CommonMessage.LOAD_MSG_FAQ, show_alert=False)
    await call.message.delete()
    await call.message.answer(CommonMessage.CHOICE_MSG_FAQ_DEVICE,
                              reply_markup=device_inline_kb(protocol))


# TODO: –ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –≤ –±–æ—Ç –≥–¥–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ò–ò
@router.callback_query(F.data == 'get_support')
async def get_support(call: CallbackQuery, state: FSMContext,
                      current_user: dict):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    await call.answer(CommonMessage.LOAD_MSG_SUPPORT, show_alert=False)
    await call.message.delete()
    await call.message.answer(CommonMessage.MSG_FOR_TROUBLE,
                              f'{call.from_user.first_name}')


@router.callback_query(F.data == 'get_certificate')
async def get_certificate(call: CallbackQuery, current_user: dict):
    """CallBack –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    assert call.message is not None
    assert isinstance(call.message, Message)
    await call.answer(CommonMessage.LOAD_MSG_KEYS, show_alert=False)
    if current_user.get('subscription'):
        async with ChatActionSender.typing(bot=bot,
                                           chat_id=call.message.chat.id):
            url = (settings.get_backend_url +
                   settings.SUBSCRIPTION_PATH +
                   str(call.from_user.id))
            async with call.bot.http_client.get(url) as response:
                if response.status != 200:
                    await call.message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
                    return
                answer = await response.json()
            await call.message.delete()
            await call.message.answer(
                CommonMessage.MSG_FOR_OVPN,
                reply_markup=keys_inline_kb(answer))
    else:
        await call.message.delete()
        await call.message.answer(
                CommonMessage.MSG_WITHOUT_SUB,
                reply_markup=keys_inline_kb())
