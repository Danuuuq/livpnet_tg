volumes:
  livpnet_data:

services:

  database:
    image: postgres:17-alpine
    container_name: db_livpnet
    env_file: .env.prod
    volumes:
      - livpnet_data:/var/lib/postgresql/vpn_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:4-management
    hostname: rabbitmq_livpnet
    env_file: .env.prod
    depends_on:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build: ../backend
    container_name: backend_livpnet
    volumes:
      - ./logs:/app/logs/backend
    env_file: .env.prod
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  tgbot:
    build: ../tgbot
    container_name: tgbot_livpnet
    env_file: .env.prod
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  celery_worker:
    build:
      context: ../cron_celery
      dockerfile: Dockerfile.celery.worker
    env_file: .env.prod
    volumes:
      - ./logs:/app/logs/celery
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
    build:
      context: ../cron_celery
      dockerfile: Dockerfile.celery.beat
    env_file: .env.prod
    volumes:
      - .logs_celery.log:/app/logs/celery
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    build: ../nginx
    ports:
      - "8000:80"
    depends_on:
      - backend
    restart: unless-stopped